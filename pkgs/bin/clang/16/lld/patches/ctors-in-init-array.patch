--- a/ELF/Config.h
+++ b/ELF/Config.h
@@ -159,6 +159,7 @@ struct Configuration {
   bool checkDynamicRelocs;
   bool compressDebugSections;
   bool cref;
+  bool ctorsInInitArray = true;
   std::vector<std::pair<llvm::GlobPattern, uint64_t>> deadRelocInNonAlloc;
   bool defineCommon;
   bool demangle = true;
--- a/ELF/Driver.cpp
+++ b/ELF/Driver.cpp
@@ -995,6 +995,7 @@ static void readConfigs(opt::InputArgList &args) {
   config->chroot = args.getLastArgValue(OPT_chroot);
   config->compressDebugSections = getCompressDebugSections(args);
   config->cref = args.hasArg(OPT_cref);
+  config->ctorsInInitArray = args.hasFlag(OPT_ctors_in_init_array, OPT_no_ctors_in_init_array, true);
   config->defineCommon = args.hasFlag(OPT_define_common, OPT_no_define_common,
                                       !args.hasArg(OPT_relocatable));
   config->optimizeBBJumps =
--- a/ELF/InputFiles.cpp
+++ b/ELF/InputFiles.cpp
@@ -873,6 +873,13 @@ InputSectionBase *ObjFile<ELFT>::getRelocTarget(uint32_t idx,
   return nullptr;
 }
 
+bool isCtorsInInitArraySection(StringRef name, StringRef filename) {
+ return config->ctorsInInitArray && !config->relocatable &&
+      !(isCrtbegin(filename) || isCrtend(filename)) && (
+          name == ".ctors" || name == ".dtors" ||
+          name.startswith(".ctors.") || name.startswith(".dtors."));
+}
+
 template <class ELFT>
 InputSectionBase *ObjFile<ELFT>::createInputSection(uint32_t idx,
                                                     const Elf_Shdr &sec,
@@ -1016,9 +1023,16 @@ InputSectionBase *ObjFile<ELFT>::createInputSection(uint32_t idx,
   if (name == ".eh_frame" && !config->relocatable)
     return make<EhInputSection>(*this, sec, name);
 
+  InputSectionBase *ret;
   if ((sec.sh_flags & SHF_MERGE) && shouldMerge(sec, name))
-    return make<MergeInputSection>(*this, sec, name);
-  return make<InputSection>(*this, sec, name);
+    ret = make<MergeInputSection>(*this, sec, name);
+  else
+    ret = make<InputSection>(*this, sec, name);
+  if (isCtorsInInitArraySection(name, this->getName())) {
+    ret->reverse = true;
+    ret->type = name[1] == 'c' ? SHT_INIT_ARRAY : SHT_FINI_ARRAY;
+  }
+  return ret;
 }
 
 // Initialize this->Symbols. this->Symbols is a parallel array as
--- a/ELF/InputSection.cpp
+++ a/ELF/InputSection.cpp
@@ -1256,6 +1256,14 @@ template <class ELFT> void InputSection::writeTo(uint8_t *buf) {
   // and then apply relocations.
   memcpy(buf, rawData.data(), rawData.size());
   relocate<ELFT>(buf, buf + rawData.size());
+
+  // Reverse .ctors in .init_array.
+  if (this->reverse) {
+    auto start = (typename ELFT::uint *)buf;
+    auto end = (typename ELFT::uint *)(buf + rawData.size());
+    for (--end; start < end; ++start, --end)
+      std::swap(*start, *end);
+  }
 }
 
 void InputSection::replace(InputSection *other) {
--- a/ELF/InputSection.h
+++ a/ELF/InputSection.h
@@ -62,6 +62,9 @@ public:
   // Set for sections that should not be folded by ICF.
   uint8_t keepUnique : 1;
 
+  // Reverse section contents to put .ctors in .init_array.
+  unsigned reverse : 1;
+
   // The 1-indexed partition that this section is assigned to by the garbage
   // collector, or 0 if this section is dead. Normally there is only one
   // partition, so this will either be 0 or 1.
@@ -96,6 +99,7 @@ protected:
                         uint32_t entsize, uint32_t alignment, uint32_t type,
                         uint32_t info, uint32_t link)
       : name(name), sectionKind(sectionKind), bss(false), keepUnique(false),
+        reverse(false),
         alignment(alignment), flags(flags), entsize(entsize), type(type),
         link(link), info(info) {}
 };
--- a/ELF/LinkerScript.cpp
+++ b/ELF/LinkerScript.cpp
@@ -39,6 +39,7 @@
 #include <limits>
 #include <string>
 #include <vector>
+#include <regex>
 
 using namespace llvm;
 using namespace llvm::ELF;
@@ -49,6 +50,24 @@ using namespace lld::elf;
 
 std::unique_ptr<LinkerScript> elf::script;
 
+// Returns true if S is in one of the many forms the compiler driver may pass
+// crtbegin files.
+//
+// Gcc uses any of crtbegin[<empty>|S|T].o.
+// Clang uses Gcc's plus clang_rt.crtbegin[<empty>|S|T][-<arch>|<empty>].o.
+
+bool elf::isCrtbegin(StringRef s) {
+  static std::regex re(R"((clang_rt\.)?crtbegin[ST]?(-.*)?\.o)");
+  s = sys::path::filename(s);
+  return std::regex_match(s.begin(), s.end(), re);
+}
+
+bool elf::isCrtend(StringRef s) {
+  static std::regex re(R"((clang_rt\.)?crtend[ST]?(-.*)?\.o)");
+  s = sys::path::filename(s);
+  return std::regex_match(s.begin(), s.end(), re);
+}
+
 static bool isSectionPrefix(StringRef prefix, StringRef name) {
   return name.consume_front(prefix) && (name.empty() || name[0] == '.');
 }
@@ -57,6 +76,11 @@ static StringRef getOutputSectionName(const InputSectionBase *s) {
   if (config->relocatable)
     return s->name;
 
+  if (s->reverse) {
+    assert(s->name.startswith(".ctors") || s->name.startswith(".dtors"));
+    return s->name[1] == 'c' ? ".init_array" : ".fini_array";
+  }
+
   // This is for --emit-relocs. If .text.foo is emitted as .text.bar, we want
   // to emit .rela.text.foo as .rela.text.bar for consistency (this is not
   // technically required, but not doing it is odd). This code guarantees that.
--- a/ELF/LinkerScript.h
+++ b/ELF/LinkerScript.h
@@ -37,6 +37,9 @@ class SectionBase;
 class Symbol;
 class ThunkSection;
 
+bool isCrtbegin(StringRef);
+bool isCrtend(StringRef);
+
 // This represents an r-value in the linker script.
 struct ExprValue {
   ExprValue(SectionBase *sec, bool forceAbsolute, uint64_t val,
--- a/ELF/Options.td
+++ b/ELF/Options.td
@@ -129,6 +129,10 @@ def color_diagnostics_eq: JJ<"color-diagnostics=">,
 def cref: FF<"cref">,
   HelpText<"Output cross reference table. If -Map is specified, print to the map file">;
 
+defm ctors_in_init_array: B<"ctors-in-init-array",
+    "Put .ctors in .init_array and .dtors in .fini_array (default)",
+    "Do not put .ctors in .init_array or .dtors in .fini_array">;
+
 defm define_common: B<"define-common",
     "Assign space to common symbols",
     "Do not assign space to common symbols">;
@@ -696,7 +700,6 @@ def: F<"detect-odr-violations">;
 def: F<"long-plt">;
 def: FF<"no-add-needed">;
 def: F<"no-copy-dt-needed-entries">;
-def: F<"no-ctors-in-init-array">;
 def: F<"no-keep-memory">;
 def: F<"no-warn-mismatch">;
 def: Separate<["--", "-"], "rpath-link">;
